import java_cup.runtime.*;

action code {:
    String aux = "";
:}

parser code {:
  @Override
  public void report_error(String message, Object info){      // Syntax error handling message
      Prints.error();
      PLC.out.println("\tSyntax error: " + info + "\t" + message);
      Prints.halt();
  }
:}

/*Terminales*/
terminal String IDENT, NUM;
terminal INT, CHAR, FLOAT;
terminal TYPEDEF, PYC, COMA;
terminal ASIG, IGUAL, DISTINTO, MAYOR, MENOR, MAYORIG, MENORIG, TRUE, FALSE;
terminal SWITCH, CASE, DEFAULT, BREAK;
terminal PRINT;
terminal MAS, MENOS, POR, DIV, MODULO, POWER, MENOSUNARIO, MASMAS, MENOSMENOS, MASMASR, MENOSMENOSR, MASEQ, MENOSEQ, POREQ, DIVEQ; 
terminal AP, CP, ALL, CLL;
terminal OR, AND, NOT;
terminal String DO, WHILE, ELSE, ELSEIF, IF, INTERR, DP;
terminal DoubleTag FOR;

/*No Terminales*/

non terminal programa, sentencia_comp, lista_de_sent, sent, sentencia_simp;
non terminal sent_if, else_if, sent_while, sent_do_while, sent_switch, lista_switch, opt_default, sent_for, for_var, sent_print;
non terminal String list_declar_var, declar_tipo, tipo, exp, asig;
non terminal DoubleTag condicion;

/*Precedencias*/

precedence right COMA;
precedence right ASIG, MASEQ, MENOSEQ, POREQ, DIVEQ, DP;
precedence right INTERR;
precedence left CP, CLL;
precedence left OR;
precedence left AND;
precedence left IGUAL, DISTINTO;
precedence left MAYOR, MAYORIG, MENOR, MENORIG;
precedence left MAS, MENOS;
precedence left POR, DIV, MODULO;
precedence right POWER;
precedence right NOT, MASMASR, MENOSMENOSR, MENOSUNARIO;
precedence left MASMAS, MENOSMENOS;
precedence right AP, ALL;
precedence left ELSEIF, ELSE;

/*Gramaticas*/

start with lista_de_sent;

lista_de_sent ::= lista_de_sent sent | sent;

sent ::= sentencia_simp;

sentencia_simp ::= PYC
                | list_declar_var PYC
                | declar_tipo PYC
                | exp PYC
                | sent_if
                | sent_while
                | sent_do_while
                | sent_for
                | sent_switch
                | sent_print PYC
                | ALL lista_de_sent CLL
                ;

tipo ::= INT:i {: RESULT = "int"; :}
        | CHAR:c {: RESULT = "char"; :}
        | FLOAT:f {: RESULT = "float"; :}
        | IDENT:id {: RESULT = id; :}
        ;

list_declar_var ::= tipo IDENT | list_declar_var COMA IDENT;

declar_tipo ::= TYPEDEF tipo:t IDENT:i {: Prints._typedef(t,i); :};

asig ::= IDENT:i ASIG exp:e {: Prints.asig(i, e); RESULT = i; :};

sent_if ::= IF AP condicion:c CP
        {:
            Prints.label(c.getT());
        :}
            sent
        {:
            aux=c.getF();
        :} 
            else_if
        ;
else_if ::=  {: Prints.label(aux); :}
        |   ELSE:tag
        {: 
            Prints._goto(tag);
            Prints.label(aux); 
        :}
            sent {: Prints.label(tag); :}
        ;

sent_while ::=  WHILE:tag AP //tag comes from lexer
            {:
                Prints.label(tag);
            :}
                condicion:c CP
            {:
                Prints.label(c.getT());
            :}
                sent
            {:
                Prints._goto(tag);
                Prints.label(c.getF()); // out of the loop
            :}
            ;

sent_do_while ::=   DO:tag //tag comes from lexer
                {:
                    Prints.label(tag);
                :}
                    sent WHILE AP condicion:c
                {:
                    Prints.label(c.getT());
                    Prints._goto(tag);
                    Prints.label(c.getF()); //out of the loop
                :} CP PYC
                 ;

for_var ::= IDENT:i {: RESULT = i; :}
        |   asig:v {: RESULT = v; :}
        ;

sent_for ::= FOR:tag AP for_var PYC //tag comes from lexer
            {:
                Prints.label(tag.getT()); //check condition
            :}
            condicion:c PYC
            {:
                Prints.label(tag.getF()); //modify variable
            :}
            exp CP
            {:
                Prints._goto(tag.getT());
                Prints.label(c.getT());
            :}
            sent
            {:
                Prints._goto(tag.getF());
                Prints.label(c.getF()); //out of the loop
            :}
            ;

sent_switch ::= SWITCH AP exp CP ALL lista_switch opt_default CLL;

lista_switch ::= CASE NUM DP sent BREAK PYC
            | lista_switch CASE NUM DP sent BREAK PYC
            ;

opt_default ::= DEFAULT DP sent:s BREAK PYC {:  :}
            | {: RESULT = ""; :}
            ;

sent_print ::=  PRINT exp:e {: Prints._print(e); :};

exp ::=     exp:e1 MAS exp:e2 {: RESULT = Prints.operate(e1, Prints.MAS, e2); :}
        |   exp:e1 MENOS exp:e2 {: RESULT = Prints.operate(e1, Prints.MENOS, e2); :}
        |   exp:e1 POR exp:e2 {: RESULT = Prints.operate(e1, Prints.POR, e2); :}
        |   exp:e1 DIV exp:e2 {: RESULT = Prints.operate(e1, Prints.DIV, e2); :}
        |   exp:e1 MODULO exp:e2 {: RESULT = Prints.operate(e1, Prints.MODULO, e2); :}
        |   IDENT:i MASEQ exp:e {: Prints.operateEQ(i, Prints.MASEQ, e); RESULT = i; :}
        |   IDENT:i MENOSEQ exp:e {: Prints.operateEQ(i, Prints.MENOSEQ, e); RESULT = i; :}
        |   IDENT:i POREQ exp:e {: Prints.operateEQ(i, Prints.POREQ, e); RESULT = i; :}
        |   IDENT:i DIVEQ exp:e {: Prints.operateEQ(i, Prints.DIVEQ, e); RESULT = i; :}
        |   MENOS exp:e {: RESULT = Prints.operate(null, Prints.MENOSUNARIO, e); :} %prec MENOSUNARIO
        |   AP exp:e CP {: RESULT = e; :}
        |   asig:a {: RESULT = a; :}
        |   IDENT:i {: RESULT = i; :} //caracter
        |   NUM:n	{: RESULT = n; :} //entero
        |   MASMAS IDENT:i
        {:
            String expr = i+" + 1";
            Prints.asig(i, expr);
            RESULT = i;
        :} %prec MASMASR
        |   IDENT:i MASMAS 
        {:
            String temp = GenTag.genTemp();
            Prints.asig(temp, i);
            String expr = i+" + 1";
            Prints.asig(i, expr);
            RESULT = temp;
        :}
        |   MENOSMENOS IDENT:i
        {: 
            String expr = i+" - 1";
            Prints.asig(i, expr);
            RESULT = i;
        :} %prec MENOSMENOSR
        |   IDENT:i MENOSMENOS
        {:  
            String temp = GenTag.genTemp();
            Prints.asig(temp, i);
            String expr = i+" - 1";
            Prints.asig(i, expr);
            RESULT = temp; 
        :}
        |   condicion:c INTERR:tag
            {: 
                Prints.label(c.getT());
            :}
                exp:e1 DP:tag2
            {:  
                Prints._goto(tag2);
                Prints.label(c.getF());
            :}
                exp:e2
            {:
                Prints.label(tag2);
                RESULT = tag;
            :}
        ;

condicion ::=   exp:e1 IGUAL exp:e2 {: RESULT = Prints.conditional(Prints.IGUAL, e1, e2); :}
            |   exp:e1 DISTINTO exp:e2 {: RESULT = Prints.conditional(Prints.DISTINTO, e1, e2); :}
            |   exp:e1 MENOR exp:e2 {: RESULT = Prints.conditional(Prints.MENOR, e1, e2); :}
            |   exp:e1 MENORIG exp:e2 {: RESULT = Prints.conditional(Prints.MENORIG, e1, e2); :}
            |   exp:e1 MAYOR exp:e2 {: RESULT = Prints.conditional(Prints.MAYOR, e1, e2); :}
            |   exp:e1 MAYORIG exp:e2 {: RESULT = Prints.conditional(Prints.MAYORIG, e1, e2); :}
            |   condicion:c1 AND {: Prints.label(c1.getT()); :}
                condicion:c2 {: 
                Prints.label(c1.getF()); 
                Prints._goto(c2.getF());
                RESULT = c2;
            :}
            |   condicion:c1 OR {: Prints.label(c1.getF()); :}
                condicion:c2 {:
                Prints.label(c1.getT());
                Prints._goto(c2.getT());
                RESULT = c2;
            :}
            |   NOT condicion:c {: c.permute(); RESULT = c; :}
            |   AP condicion:c CP {: RESULT = c; :}
            |   TRUE {: RESULT = Prints.conditional(Prints.TRUE, "true", null); :}
            |   FALSE {: RESULT = Prints.conditional(Prints.FALSE, "false", null); :}
            ;


