
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\105\000\002\002\004\000\002\004\004\000\002\004" +
    "\003\000\002\005\003\000\002\006\003\000\002\006\004" +
    "\000\002\006\004\000\002\006\004\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\004\000\002\006\005\000\002\023" +
    "\003\000\002\023\003\000\002\023\003\000\002\021\004" +
    "\000\002\021\005\000\002\022\005\000\002\025\005\000" +
    "\002\031\002\000\002\032\002\000\002\007\012\000\002" +
    "\010\002\000\002\033\002\000\002\010\005\000\002\034" +
    "\002\000\002\035\002\000\002\011\011\000\002\036\002" +
    "\000\002\012\012\000\002\017\003\000\002\017\003\000" +
    "\002\037\002\000\002\040\002\000\002\041\002\000\002" +
    "\016\016\000\002\013\012\000\002\014\010\000\002\014" +
    "\011\000\002\015\007\000\002\015\002\000\002\020\004" +
    "\000\002\024\005\000\002\024\004\000\002\024\005\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\030\005\000\002\042\002" +
    "\000\002\030\006\000\002\043\002\000\002\030\006\000" +
    "\002\030\004\000\002\030\005\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\027\003\000\002\027" +
    "\003\000\002\027\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\213\000\040\004\006\005\023\010\012\011\013\012" +
    "\027\015\010\026\021\027\017\033\030\035\005\042\022" +
    "\044\015\051\024\052\014\054\035\001\002\000\050\002" +
    "\ufffe\004\ufffe\005\ufffe\010\ufffe\011\ufffe\012\ufffe\015\ufffe" +
    "\026\ufffe\027\ufffe\032\ufffe\033\ufffe\035\ufffe\042\ufffe\044" +
    "\ufffe\045\ufffe\051\ufffe\052\ufffe\053\ufffe\054\ufffe\001\002" +
    "\000\012\004\052\005\023\035\005\042\022\001\002\000" +
    "\022\004\ufff0\015\uffd0\017\073\034\uffd0\035\uffd0\036\uffd0" +
    "\037\uffd0\040\uffd0\001\002\000\004\015\214\001\002\000" +
    "\050\002\ufffd\004\ufffd\005\ufffd\010\ufffd\011\ufffd\012\ufffd" +
    "\015\ufffd\026\ufffd\027\ufffd\032\ufffd\033\ufffd\035\ufffd\042" +
    "\ufffd\044\ufffd\045\ufffd\051\ufffd\052\ufffd\053\ufffd\054\ufffd" +
    "\001\002\000\004\004\213\001\002\000\004\004\ufff2\001" +
    "\002\000\004\004\ufff1\001\002\000\004\042\205\001\002" +
    "\000\040\004\006\005\023\010\012\011\013\012\027\015" +
    "\010\026\021\027\017\033\030\035\005\042\022\044\015" +
    "\051\024\052\014\054\035\001\002\000\050\002\ufff8\004" +
    "\ufff8\005\ufff8\010\ufff8\011\ufff8\012\ufff8\015\ufff8\026\ufff8" +
    "\027\ufff8\032\ufff8\033\ufff8\035\ufff8\042\ufff8\044\ufff8\045" +
    "\ufff8\051\ufff8\052\ufff8\053\ufff8\054\ufff8\001\002\000\004" +
    "\042\153\001\002\000\016\015\152\034\060\035\054\036" +
    "\056\037\063\040\065\001\002\000\004\042\140\001\002" +
    "\000\012\004\052\005\023\035\005\042\022\001\002\000" +
    "\040\015\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf\024\uffcf" +
    "\025\uffcf\034\uffcf\035\uffcf\036\uffcf\037\uffcf\040\uffcf\043" +
    "\uffcf\046\uffcf\047\uffcf\001\002\000\040\004\uffe2\005\uffe2" +
    "\010\uffe2\011\uffe2\012\uffe2\015\uffe2\026\uffe2\027\uffe2\033" +
    "\uffe2\035\uffe2\042\uffe2\044\uffe2\051\uffe2\052\uffe2\054\uffe2" +
    "\001\002\000\050\002\ufff7\004\ufff7\005\ufff7\010\ufff7\011" +
    "\ufff7\012\ufff7\015\ufff7\026\ufff7\027\ufff7\032\ufff7\033\ufff7" +
    "\035\ufff7\042\ufff7\044\ufff7\045\ufff7\051\ufff7\052\ufff7\053" +
    "\ufff7\054\ufff7\001\002\000\040\015\uffd1\020\uffd1\021\uffd1" +
    "\022\uffd1\023\uffd1\024\uffd1\025\uffd1\034\uffd1\035\uffd1\036" +
    "\uffd1\037\uffd1\040\uffd1\043\uffd1\046\uffd1\047\uffd1\001\002" +
    "\000\010\004\126\010\012\011\013\001\002\000\012\004" +
    "\052\005\023\035\005\042\022\001\002\000\050\002\ufff9" +
    "\004\ufff9\005\ufff9\010\ufff9\011\ufff9\012\ufff9\015\ufff9\026" +
    "\ufff9\027\ufff9\032\ufff9\033\ufff9\035\ufff9\042\ufff9\044\ufff9" +
    "\045\ufff9\051\ufff9\052\ufff9\053\ufff9\054\ufff9\001\002\000" +
    "\006\015\122\016\121\001\002\000\042\002\117\004\006" +
    "\005\023\010\012\011\013\012\027\015\010\026\021\027" +
    "\017\033\030\035\005\042\022\044\015\051\024\052\014" +
    "\054\035\001\002\000\004\015\116\001\002\000\004\042" +
    "\041\001\002\000\050\002\ufff5\004\ufff5\005\ufff5\010\ufff5" +
    "\011\ufff5\012\ufff5\015\ufff5\026\ufff5\027\ufff5\032\ufff5\033" +
    "\ufff5\035\ufff5\042\ufff5\044\ufff5\045\ufff5\051\ufff5\052\ufff5" +
    "\053\ufff5\054\ufff5\001\002\000\050\002\ufff6\004\ufff6\005" +
    "\ufff6\010\ufff6\011\ufff6\012\ufff6\015\ufff6\026\ufff6\027\ufff6" +
    "\032\ufff6\033\ufff6\035\ufff6\042\ufff6\044\ufff6\045\ufff6\051" +
    "\ufff6\052\ufff6\053\ufff6\054\ufff6\001\002\000\044\002\uffff" +
    "\004\uffff\005\uffff\010\uffff\011\uffff\012\uffff\015\uffff\026" +
    "\uffff\027\uffff\033\uffff\035\uffff\042\uffff\044\uffff\045\uffff" +
    "\051\uffff\052\uffff\054\uffff\001\002\000\004\004\043\001" +
    "\002\000\004\015\uffdf\001\002\000\006\015\uffe0\017\073" +
    "\001\002\000\004\015\045\001\002\000\014\004\uffde\005" +
    "\uffde\035\uffde\042\uffde\050\uffde\001\002\000\014\004\052" +
    "\005\023\035\005\042\050\050\047\001\002\000\014\004" +
    "\052\005\023\035\005\042\050\050\047\001\002\000\014" +
    "\004\052\005\023\035\005\042\050\050\047\001\002\000" +
    "\010\015\077\046\076\047\075\001\002\000\042\015\uffd0" +
    "\017\073\020\uffd0\021\uffd0\022\uffd0\023\uffd0\024\uffd0\025" +
    "\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0\043\uffd0" +
    "\046\uffd0\047\uffd0\001\002\000\030\020\066\021\070\022" +
    "\062\023\055\024\061\025\067\034\060\035\054\036\056" +
    "\037\063\040\065\001\002\000\012\004\uffcd\005\uffcd\035" +
    "\uffcd\042\uffcd\001\002\000\012\004\uffc2\005\uffc2\035\uffc2" +
    "\042\uffc2\001\002\000\012\004\uffcc\005\uffcc\035\uffcc\042" +
    "\uffcc\001\002\000\012\004\052\005\023\035\005\042\022" +
    "\001\002\000\012\004\uffce\005\uffce\035\uffce\042\uffce\001" +
    "\002\000\012\004\uffc0\005\uffc0\035\uffc0\042\uffc0\001\002" +
    "\000\012\004\uffbf\005\uffbf\035\uffbf\042\uffbf\001\002\000" +
    "\012\004\uffcb\005\uffcb\035\uffcb\042\uffcb\001\002\000\012" +
    "\004\052\005\023\035\005\042\022\001\002\000\012\004" +
    "\uffca\005\uffca\035\uffca\042\uffca\001\002\000\012\004\uffbe" +
    "\005\uffbe\035\uffbe\042\uffbe\001\002\000\012\004\uffc1\005" +
    "\uffc1\035\uffc1\042\uffc1\001\002\000\012\004\uffbd\005\uffbd" +
    "\035\uffbd\042\uffbd\001\002\000\040\015\uffd4\020\uffd4\021" +
    "\uffd4\022\uffd4\023\uffd4\024\uffd4\025\uffd4\034\060\035\054" +
    "\036\056\037\063\040\065\043\uffd4\046\uffd4\047\uffd4\001" +
    "\002\000\024\015\uffc9\034\060\035\054\036\056\037\063" +
    "\040\065\043\uffc9\046\uffc9\047\uffc9\001\002\000\012\004" +
    "\052\005\023\035\005\042\022\001\002\000\040\015\uffec" +
    "\020\uffec\021\uffec\022\uffec\023\uffec\024\uffec\025\uffec\034" +
    "\060\035\054\036\056\037\063\040\065\043\uffec\046\uffec" +
    "\047\uffec\001\002\000\014\004\uffc8\005\uffc8\035\uffc8\042" +
    "\uffc8\050\uffc8\001\002\000\014\004\uffc6\005\uffc6\035\uffc6" +
    "\042\uffc6\050\uffc6\001\002\000\012\004\uffdd\005\uffdd\035" +
    "\uffdd\042\uffdd\001\002\000\012\004\052\005\023\035\005" +
    "\042\022\001\002\000\016\034\060\035\054\036\056\037" +
    "\063\040\065\043\102\001\002\000\040\004\uffdc\005\uffdc" +
    "\010\uffdc\011\uffdc\012\uffdc\015\uffdc\026\uffdc\027\uffdc\033" +
    "\uffdc\035\uffdc\042\uffdc\044\uffdc\051\uffdc\052\uffdc\054\uffdc" +
    "\001\002\000\040\004\006\005\023\010\012\011\013\012" +
    "\027\015\010\026\021\027\017\033\030\035\005\042\022" +
    "\044\015\051\024\052\014\054\035\001\002\000\050\002" +
    "\uffdb\004\uffdb\005\uffdb\010\uffdb\011\uffdb\012\uffdb\015\uffdb" +
    "\026\uffdb\027\uffdb\032\uffdb\033\uffdb\035\uffdb\042\uffdb\044" +
    "\uffdb\045\uffdb\051\uffdb\052\uffdb\053\uffdb\054\uffdb\001\002" +
    "\000\014\004\052\005\023\035\005\042\050\050\047\001" +
    "\002\000\012\015\uffc5\043\uffc5\046\uffc5\047\uffc5\001\002" +
    "\000\014\004\052\005\023\035\005\042\050\050\047\001" +
    "\002\000\012\015\uffc7\043\uffc7\046\uffc7\047\uffc7\001\002" +
    "\000\010\043\114\046\076\047\075\001\002\000\032\020" +
    "\066\021\070\022\062\023\055\024\061\025\067\034\060" +
    "\035\054\036\056\037\063\040\065\043\113\001\002\000" +
    "\040\015\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2" +
    "\025\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2\040\uffd2\043" +
    "\uffd2\046\uffd2\047\uffd2\001\002\000\012\015\uffc3\043\uffc3" +
    "\046\uffc3\047\uffc3\001\002\000\012\015\uffc4\043\uffc4\046" +
    "\uffc4\047\uffc4\001\002\000\050\002\ufff4\004\ufff4\005\ufff4" +
    "\010\ufff4\011\ufff4\012\ufff4\015\ufff4\026\ufff4\027\ufff4\032" +
    "\ufff4\033\ufff4\035\ufff4\042\ufff4\044\ufff4\045\ufff4\051\ufff4" +
    "\052\ufff4\053\ufff4\054\ufff4\001\002\000\004\002\001\001" +
    "\002\000\044\002\000\004\000\005\000\010\000\011\000" +
    "\012\000\015\000\026\000\027\000\033\000\035\000\042" +
    "\000\044\000\045\000\051\000\052\000\054\000\001\002" +
    "\000\004\004\123\001\002\000\050\002\ufffc\004\ufffc\005" +
    "\ufffc\010\ufffc\011\ufffc\012\ufffc\015\ufffc\026\ufffc\027\ufffc" +
    "\032\ufffc\033\ufffc\035\ufffc\042\ufffc\044\ufffc\045\ufffc\051" +
    "\ufffc\052\ufffc\053\ufffc\054\ufffc\001\002\000\006\015\uffee" +
    "\016\uffee\001\002\000\016\015\uffd5\034\060\035\054\036" +
    "\056\037\063\040\065\001\002\000\004\004\127\001\002" +
    "\000\004\004\ufff0\001\002\000\004\015\uffed\001\002\000" +
    "\040\004\006\005\023\010\012\011\013\012\027\015\010" +
    "\026\021\027\017\033\030\035\005\042\022\044\015\051" +
    "\024\052\014\054\035\001\002\000\004\052\132\001\002" +
    "\000\004\042\133\001\002\000\014\004\052\005\023\035" +
    "\005\042\050\050\047\001\002\000\010\043\135\046\076" +
    "\047\075\001\002\000\004\015\136\001\002\000\050\002" +
    "\uffe1\004\uffe1\005\uffe1\010\uffe1\011\uffe1\012\uffe1\015\uffe1" +
    "\026\uffe1\027\uffe1\032\uffe1\033\uffe1\035\uffe1\042\uffe1\044" +
    "\uffe1\045\uffe1\051\uffe1\052\uffe1\053\uffe1\054\uffe1\001\002" +
    "\000\016\034\060\035\054\036\056\037\063\040\065\043" +
    "\113\001\002\000\014\004\052\005\023\035\005\042\050" +
    "\050\047\001\002\000\010\043\uffeb\046\076\047\075\001" +
    "\002\000\004\043\143\001\002\000\040\004\006\005\023" +
    "\010\012\011\013\012\027\015\010\026\021\027\017\033" +
    "\030\035\005\042\022\044\015\051\024\052\014\054\035" +
    "\001\002\000\050\002\uffea\004\uffea\005\uffea\010\uffea\011" +
    "\uffea\012\uffea\015\uffea\026\uffea\027\uffea\032\uffea\033\uffea" +
    "\035\uffea\042\uffea\044\uffea\045\uffea\051\uffea\052\uffea\053" +
    "\uffea\054\uffea\001\002\000\050\002\uffe8\004\uffe8\005\uffe8" +
    "\010\uffe8\011\uffe8\012\uffe8\015\uffe8\026\uffe8\027\uffe8\032" +
    "\uffe8\033\uffe8\035\uffe8\042\uffe8\044\uffe8\045\uffe8\051\uffe8" +
    "\052\uffe8\053\146\054\uffe8\001\002\000\040\004\uffe7\005" +
    "\uffe7\010\uffe7\011\uffe7\012\uffe7\015\uffe7\026\uffe7\027\uffe7" +
    "\033\uffe7\035\uffe7\042\uffe7\044\uffe7\051\uffe7\052\uffe7\054" +
    "\uffe7\001\002\000\050\002\uffe9\004\uffe9\005\uffe9\010\uffe9" +
    "\011\uffe9\012\uffe9\015\uffe9\026\uffe9\027\uffe9\032\uffe9\033" +
    "\uffe9\035\uffe9\042\uffe9\044\uffe9\045\uffe9\051\uffe9\052\uffe9" +
    "\053\uffe9\054\uffe9\001\002\000\040\004\006\005\023\010" +
    "\012\011\013\012\027\015\010\026\021\027\017\033\030" +
    "\035\005\042\022\044\015\051\024\052\014\054\035\001" +
    "\002\000\050\002\uffe6\004\uffe6\005\uffe6\010\uffe6\011\uffe6" +
    "\012\uffe6\015\uffe6\026\uffe6\027\uffe6\032\uffe6\033\uffe6\035" +
    "\uffe6\042\uffe6\044\uffe6\045\uffe6\051\uffe6\052\uffe6\053\uffe6" +
    "\054\uffe6\001\002\000\050\002\ufffa\004\ufffa\005\ufffa\010" +
    "\ufffa\011\ufffa\012\ufffa\015\ufffa\026\ufffa\027\ufffa\032\ufffa" +
    "\033\ufffa\035\ufffa\042\ufffa\044\ufffa\045\ufffa\051\ufffa\052" +
    "\ufffa\053\ufffa\054\ufffa\001\002\000\012\004\052\005\023" +
    "\035\005\042\022\001\002\000\016\034\060\035\054\036" +
    "\056\037\063\040\065\043\155\001\002\000\004\044\156" +
    "\001\002\000\004\030\160\001\002\000\010\030\167\031" +
    "\166\045\uffd6\001\002\000\004\005\161\001\002\000\004" +
    "\014\162\001\002\000\040\004\006\005\023\010\012\011" +
    "\013\012\027\015\010\026\021\027\017\033\030\035\005" +
    "\042\022\044\015\051\024\052\014\054\035\001\002\000" +
    "\004\032\164\001\002\000\004\015\165\001\002\000\010" +
    "\030\uffd9\031\uffd9\045\uffd9\001\002\000\004\014\177\001" +
    "\002\000\004\005\172\001\002\000\004\045\171\001\002" +
    "\000\050\002\uffda\004\uffda\005\uffda\010\uffda\011\uffda\012" +
    "\uffda\015\uffda\026\uffda\027\uffda\032\uffda\033\uffda\035\uffda" +
    "\042\uffda\044\uffda\045\uffda\051\uffda\052\uffda\053\uffda\054" +
    "\uffda\001\002\000\004\014\173\001\002\000\040\004\006" +
    "\005\023\010\012\011\013\012\027\015\010\026\021\027" +
    "\017\033\030\035\005\042\022\044\015\051\024\052\014" +
    "\054\035\001\002\000\004\032\175\001\002\000\004\015" +
    "\176\001\002\000\010\030\uffd8\031\uffd8\045\uffd8\001\002" +
    "\000\040\004\006\005\023\010\012\011\013\012\027\015" +
    "\010\026\021\027\017\033\030\035\005\042\022\044\015" +
    "\051\024\052\014\054\035\001\002\000\004\032\201\001" +
    "\002\000\004\015\202\001\002\000\004\045\uffd7\001\002" +
    "\000\042\004\006\005\023\010\012\011\013\012\027\015" +
    "\010\026\021\027\017\033\030\035\005\042\022\044\015" +
    "\045\204\051\024\052\014\054\035\001\002\000\050\002" +
    "\ufff3\004\ufff3\005\ufff3\010\ufff3\011\ufff3\012\ufff3\015\ufff3" +
    "\026\ufff3\027\ufff3\032\ufff3\033\ufff3\035\ufff3\042\ufff3\044" +
    "\ufff3\045\ufff3\051\ufff3\052\ufff3\053\ufff3\054\ufff3\001\002" +
    "\000\014\004\uffe5\005\uffe5\035\uffe5\042\uffe5\050\uffe5\001" +
    "\002\000\014\004\052\005\023\035\005\042\050\050\047" +
    "\001\002\000\010\043\210\046\076\047\075\001\002\000" +
    "\040\004\uffe4\005\uffe4\010\uffe4\011\uffe4\012\uffe4\015\uffe4" +
    "\026\uffe4\027\uffe4\033\uffe4\035\uffe4\042\uffe4\044\uffe4\051" +
    "\uffe4\052\uffe4\054\uffe4\001\002\000\040\004\006\005\023" +
    "\010\012\011\013\012\027\015\010\026\021\027\017\033" +
    "\030\035\005\042\022\044\015\051\024\052\014\054\035" +
    "\001\002\000\050\002\uffe3\004\uffe3\005\uffe3\010\uffe3\011" +
    "\uffe3\012\uffe3\015\uffe3\026\uffe3\027\uffe3\032\uffe3\033\uffe3" +
    "\035\uffe3\042\uffe3\044\uffe3\045\uffe3\051\uffe3\052\uffe3\053" +
    "\uffe3\054\uffe3\001\002\000\006\015\uffef\016\uffef\001\002" +
    "\000\050\002\ufffb\004\ufffb\005\ufffb\010\ufffb\011\ufffb\012" +
    "\ufffb\015\ufffb\026\ufffb\027\ufffb\032\ufffb\033\ufffb\035\ufffb" +
    "\042\ufffb\044\ufffb\045\ufffb\051\ufffb\052\ufffb\053\ufffb\054" +
    "\ufffb\001\002\000\040\015\uffd3\020\uffd3\021\uffd3\022\uffd3" +
    "\023\uffd3\024\uffd3\025\uffd3\034\uffd3\035\uffd3\036\uffd3\037" +
    "\uffd3\040\uffd3\043\uffd3\046\uffd3\047\uffd3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\213\000\036\004\032\005\037\006\003\007\030\011" +
    "\015\012\024\013\035\016\036\020\033\021\031\022\006" +
    "\023\010\024\017\025\025\001\001\000\002\001\001\000" +
    "\006\024\214\025\025\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\004\202" +
    "\005\037\006\003\007\030\011\015\012\024\013\035\016" +
    "\036\020\033\021\031\022\006\023\010\024\017\025\025" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\026" +
    "\063\001\001\000\002\001\001\000\006\024\136\025\025" +
    "\001\001\000\002\001\001\000\004\036\127\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\124\001\001" +
    "\000\006\024\123\025\025\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\005\117\006\003\007\030\011\015" +
    "\012\024\013\035\016\036\020\033\021\031\022\006\023" +
    "\010\024\017\025\025\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\017\043\025\041\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\037\045\001" +
    "\001\000\010\024\052\025\025\030\050\001\001\000\010" +
    "\024\052\025\025\030\114\001\001\000\010\024\111\025" +
    "\025\030\110\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\026\063\027\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\024\071\025\025" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\024\070\025\025\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\026\063\001\001\000\004\026\063" +
    "\001\001\000\006\024\073\025\025\001\001\000\004\026" +
    "\063\001\001\000\004\042\106\001\001\000\004\043\104" +
    "\001\001\000\004\040\077\001\001\000\006\024\100\025" +
    "\025\001\001\000\004\026\063\001\001\000\004\041\102" +
    "\001\001\000\034\005\103\006\003\007\030\011\015\012" +
    "\024\013\035\016\036\020\033\021\031\022\006\023\010" +
    "\024\017\025\025\001\001\000\002\001\001\000\010\024" +
    "\052\025\025\030\105\001\001\000\002\001\001\000\010" +
    "\024\052\025\025\030\107\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\026\063\027\056\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\026\063\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\005\130\006\003\007\030\011\015\012\024\013" +
    "\035\016\036\020\033\021\031\022\006\023\010\024\017" +
    "\025\025\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\024\052\025\025\030\133\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\026\063\001" +
    "\001\000\010\024\052\025\025\030\140\001\001\000\004" +
    "\031\141\001\001\000\002\001\001\000\034\005\143\006" +
    "\003\007\030\011\015\012\024\013\035\016\036\020\033" +
    "\021\031\022\006\023\010\024\017\025\025\001\001\000" +
    "\004\032\144\001\001\000\004\010\146\001\001\000\004" +
    "\033\147\001\001\000\002\001\001\000\034\005\150\006" +
    "\003\007\030\011\015\012\024\013\035\016\036\020\033" +
    "\021\031\022\006\023\010\024\017\025\025\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\024\153\025\025" +
    "\001\001\000\004\026\063\001\001\000\002\001\001\000" +
    "\004\014\156\001\001\000\004\015\167\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\005\162\006\003\007" +
    "\030\011\015\012\024\013\035\016\036\020\033\021\031" +
    "\022\006\023\010\024\017\025\025\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\005\173\006\003\007\030\011\015" +
    "\012\024\013\035\016\036\020\033\021\031\022\006\023" +
    "\010\024\017\025\025\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\005\177\006\003\007" +
    "\030\011\015\012\024\013\035\016\036\020\033\021\031" +
    "\022\006\023\010\024\017\025\025\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\005\117" +
    "\006\003\007\030\011\015\012\024\013\035\016\036\020" +
    "\033\021\031\022\006\023\010\024\017\025\025\001\001" +
    "\000\002\001\001\000\004\034\205\001\001\000\010\024" +
    "\052\025\025\030\206\001\001\000\002\001\001\000\004" +
    "\035\210\001\001\000\034\005\211\006\003\007\030\011" +
    "\015\012\024\013\035\016\036\020\033\021\031\022\006" +
    "\023\010\024\017\025\025\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\026\063\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  @Override
  public void report_error(String message, Object info){      // Syntax error handling message
      Prints.error();
      PLC.out.println("\tSyntax error: " + message);
      Prints.halt();
  }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


	String aux;

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= lista_de_sent EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // lista_de_sent ::= lista_de_sent sent 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_de_sent",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // lista_de_sent ::= sent 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_de_sent",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // sent ::= sentencia_simp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sentencia_simp ::= PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_simp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sentencia_simp ::= list_declar_var PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_simp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sentencia_simp ::= declar_tipo PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_simp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sentencia_simp ::= exp PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_simp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sentencia_simp ::= sent_if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_simp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sentencia_simp ::= sent_while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_simp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sentencia_simp ::= sent_do_while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_simp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sentencia_simp ::= sent_for 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_simp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sentencia_simp ::= sent_switch 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_simp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sentencia_simp ::= sent_print PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_simp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sentencia_simp ::= ALL lista_de_sent CLL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_simp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tipo ::= INT 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // tipo ::= CHAR 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // tipo ::= IDENT 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // list_declar_var ::= tipo IDENT 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_declar_var",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // list_declar_var ::= list_declar_var COMA IDENT 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_declar_var",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declar_tipo ::= TYPEDEF tipo IDENT 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Prints._typedef(t,i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declar_tipo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // asig ::= IDENT ASIG exp 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Prints.asig(i, e); RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asig",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$0 ::= 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DoubleTag c = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                Prints.label(c.getT());
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DoubleTag c = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

                aux=c.getF();
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // sent_if ::= IF AP condicion NT$0 CP sent NT$1 else_if 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DoubleTag c = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_if",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // else_if ::= 
            {
              Object RESULT =null;
		 Prints.label(aux); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_if",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$2 ::= 
            {
              Object RESULT =null;
		int tagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String tag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 
            Prints._goto(tag);
            Prints.label(aux); 
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // else_if ::= ELSE NT$2 sent 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String tag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 Prints.label(tag); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_if",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$3 ::= 
            {
              Object RESULT =null;
		int tagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String tag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                Prints.label(tag);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$4 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String tag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DoubleTag c = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                Prints.label(c.getT());
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // sent_while ::= WHILE AP NT$3 condicion CP NT$4 sent 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String tag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DoubleTag c = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                Prints._goto(tag);
                Prints.label(c.getF()); // out of the loop
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_while",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$5 ::= 
            {
              Object RESULT =null;
		int tagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String tag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                    Prints.label(tag);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // sent_do_while ::= DO NT$5 sent WHILE AP condicion CP PYC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int tagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String tag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		DoubleTag c = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                    Prints.label(c.getT());
                    Prints._goto(tag);
                    Prints.label(c.getF()); //out of the loop
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_do_while",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // for_var ::= IDENT 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_var",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // for_var ::= asig 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_var",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NT$6 ::= 
            {
              Object RESULT =null;
		int tagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DoubleTag tag = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

                Prints.label(tag.getT()); //check condition
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$7 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		DoubleTag tag = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DoubleTag c = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                Prints.label(tag.getF()); //modify variable
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$8 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		DoubleTag tag = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		DoubleTag c = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

                Prints._goto(tag.getT());
                Prints.label(c.getT());
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // sent_for ::= FOR AP for_var PYC NT$6 condicion PYC NT$7 exp CP NT$8 sent 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int tagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		DoubleTag tag = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		DoubleTag c = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		
                Prints._goto(tag.getF());
                Prints.label(c.getF()); //out of the loop
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_for",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // sent_switch ::= SWITCH AP exp CP ALL lista_switch opt_default CLL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_switch",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // lista_switch ::= CASE NUM DP sent BREAK PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_switch",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // lista_switch ::= lista_switch CASE NUM DP sent BREAK PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_switch",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // opt_default ::= DEFAULT DP sent BREAK PYC 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opt_default",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // opt_default ::= 
            {
              Object RESULT =null;
		 RESULT = ""; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opt_default",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // sent_print ::= PRINT exp 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Prints._print(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_print",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exp ::= exp binary_op exp 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Prints.operate(e1, op, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exp ::= MENOS exp 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Prints.operate(null, Prints.MENOSUNARIO, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exp ::= AP exp CP 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exp ::= asig 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exp ::= IDENT 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp ::= NUM 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // binary_op ::= MAS 
            {
              Integer RESULT =null;
		 RESULT = Prints.MAS; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_op",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // binary_op ::= MENOS 
            {
              Integer RESULT =null;
		 RESULT = Prints.MENOS; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_op",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // binary_op ::= POR 
            {
              Integer RESULT =null;
		 RESULT = Prints.POR; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_op",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // binary_op ::= DIV 
            {
              Integer RESULT =null;
		 RESULT = Prints.DIV; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_op",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // binary_op ::= MODULO 
            {
              Integer RESULT =null;
		 RESULT = Prints.MODULO; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_op",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // condicion ::= exp relational_op exp 
            {
              DoubleTag RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Prints.conditional(op, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NT$9 ::= 
            {
              DoubleTag RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DoubleTag c1 = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 Prints.label(c1.getT()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // condicion ::= condicion AND NT$9 condicion 
            {
              DoubleTag RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (DoubleTag) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DoubleTag c1 = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DoubleTag c2 = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                Prints.label(c1.getF()); 
                Prints._goto(c2.getF());
                RESULT = c2;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // NT$10 ::= 
            {
              DoubleTag RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DoubleTag c1 = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 Prints.label(c1.getF()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // condicion ::= condicion OR NT$10 condicion 
            {
              DoubleTag RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (DoubleTag) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DoubleTag c1 = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DoubleTag c2 = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Prints.label(c1.getT());
                Prints._goto(c2.getT());
                RESULT = c2;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // condicion ::= NOT condicion 
            {
              DoubleTag RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DoubleTag c = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 c.permute(); RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // condicion ::= AP condicion CP 
            {
              DoubleTag RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DoubleTag c = (DoubleTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // relational_op ::= MENOR 
            {
              Integer RESULT =null;
		 RESULT = Prints.MENOR; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_op",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // relational_op ::= MENORIG 
            {
              Integer RESULT =null;
		 RESULT = Prints.MENORIG; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_op",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // relational_op ::= MAYORIG 
            {
              Integer RESULT =null;
		 RESULT = Prints.MAYORIG; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_op",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // relational_op ::= MAYOR 
            {
              Integer RESULT =null;
		 RESULT = Prints.MAYOR; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_op",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // relational_op ::= IGUAL 
            {
              Integer RESULT =null;
		 RESULT = Prints.IGUAL; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_op",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // relational_op ::= DISTINTO 
            {
              Integer RESULT =null;
		 RESULT = Prints.DISTINTO; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_op",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
